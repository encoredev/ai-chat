// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: avatars.sql

package db

import (
	"context"
)

const deleteAvatar = `-- name: DeleteAvatar :one
UPDATE avatars SET deleted = now() WHERE bot_name = $1 AND deleted IS NULL RETURNING id, file_id, bot_name, url, deleted
`

func (q *Queries) DeleteAvatar(ctx context.Context, db DBTX, botName string) (*Avatar, error) {
	row := db.QueryRowContext(ctx, deleteAvatar, botName)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BotName,
		&i.Url,
		&i.Deleted,
	)
	return &i, err
}

const getAvatar = `-- name: GetAvatar :one
SELECT id, file_id, bot_name, url, deleted FROM avatars WHERE bot_name = $1 AND deleted IS NULL
`

func (q *Queries) GetAvatar(ctx context.Context, db DBTX, botName string) (*Avatar, error) {
	row := db.QueryRowContext(ctx, getAvatar, botName)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BotName,
		&i.Url,
		&i.Deleted,
	)
	return &i, err
}

const insertAvatar = `-- name: InsertAvatar :one
INSERT INTO avatars (bot_name, file_id, url) VALUES ($1, $2, $3) RETURNING id, file_id, bot_name, url, deleted
`

type InsertAvatarParams struct {
	BotName string
	FileID  string
	Url     string
}

func (q *Queries) InsertAvatar(ctx context.Context, db DBTX, arg InsertAvatarParams) (*Avatar, error) {
	row := db.QueryRowContext(ctx, insertAvatar, arg.BotName, arg.FileID, arg.Url)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BotName,
		&i.Url,
		&i.Deleted,
	)
	return &i, err
}
